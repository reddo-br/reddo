# -*- coding: utf-8 -*-

require 'java'
require 'jrubyfx'

require 'pref/preferences'
require 'pref/subs'
require 'app'
require 'util'

require 'page'
require 'account_selector'

require 'url_handler'
require 'html/html_entity'

require 'app_color'

import 'javafx.scene.control.cell.MapValueFactory'
# import 'javafx.beans.property.SimpleStringProperty'
import 'javafx.beans.property.SimpleMapProperty'
import 'javafx.beans.property.SimpleObjectProperty'
import 'javafx.scene.control.cell.TextFieldTableCell'
import 'javafx.scene.text.TextFlow'
import 'javafx.application.Platform'

class SubPage < Page
  
  def initialize( info )
    super(3.0)
    getStyleClass().add("sub-page")
    
    @page_info = info
    @page_info[:site] ||= 'reddit'
    @page_info[:type] ||= 'sub'
    
    @url_handler = UrlHandler.new( @page_info[:site] )

    pref_subname = if @page_info[:name].to_s == ""
                     "_"
                   else
                     # subの場合,idではない
                     subname_to_pathname(@page_info[:name]).gsub(/\// , "." )
                   end
    
    @pref = Subs.new( pref_subname )
    setSpacing(3.0)
    @thread_pool = []
    @account_name = @pref['account_name'] || @page_info[:account_name] # ページごとの記録が優先
    @pref['account_name'] = @account_name
    @sub_info = nil

    @is_multireddit = @url_handler.path_is_multireddit( @page_info[:name] )

    ### ボタン第一列
    # @toolbar = ToolBar.new() # ツールバーは良くない はじっこが切れるからだっけ
    @button_area = BorderPane.new
    @button_area_right = HBox.new(3.0)
    @button_area_right.setAlignment( Pos::CENTER_LEFT )
    @account_selector = AccountSelector.new( @account_name )
    # @account_selector.valueProperty().addListener{|ev|
    @account_selector.set_change_cb{ # アカウントリロード時には呼ばない
      # $stderr.puts ev.getValue()
      value = @account_selector.getValue()

      if not @account_loading
        if @account_name != @account_selector.get_account
          @account_name = @account_selector.get_account # 未ログイン = nil
          @pref['account_name'] = @account_name
          start_reload
        end
      end
    }

    @title_label = Label.new( subpath_to_name(@page_info[:name]) )
    @title_label.setStyle("-fx-font-size:16pt")

    @active_label = Label.new()

    @external_browser_button = Button.new("ブラウザで開く")
    @external_browser_button.setOnAction{|e|
      url = get_sub_url
      if url.to_s.length > 0
        App.i.open_external_browser( url.to_s )
      end
      
    }

    @button_area.setLeft( @account_selector )
    BorderPane.setAlignment( @title_label , Pos::CENTER_LEFT )
    @button_area.setCenter( @title_label )

    @button_area_right.getChildren().addAll( Separator.new( Orientation::VERTICAL ),
                                             @active_label ,
                                             @external_browser_button)
    
    if not @is_multireddit
      @external_post_page_button = Button.new("投稿ページ")
      @external_post_page_button.setOnAction{|e|
        url = get_sub_url
        if url.to_s.length > 0
          App.i.open_external_browser( url.to_s + "submit" )
        end
      }
      @button_area_right.getChildren().add( @external_post_page_button )
    end

    @button_area.setRight( @button_area_right )
    getChildren().add( @button_area )

    ### ボタン第二列
    # ソートバー
    # @sort_button_area = HBox.new()
    @sort_button_area = BorderPane.new()
    # @sort_button_area.setAlignment(Pos::CENTER_LEFT)

    @sort_button_area_left = HBox.new
    @sort_button_area_left.setAlignment(Pos::CENTER_LEFT)
    @reload_button = Button.new()
    # @reload_button.setGraphic( ImageView.new( Image.new( App.res("/res/reload.png") )))
    @reload_button.setText("リロード")
    @reload_button.setOnAction{|e|
      start_reload
    }

    @load_stop_button = Button.new()
    @load_stop_button.setText("中断")
    @load_stop_button.setOnAction{|e|
      abort_loading
    }

    # @toolbar.getItems().add( @reload_button )
    @sort_button_area_left.getChildren().addAll(@reload_button ,
                                                @load_stop_button ,
                                                Label.new(" "))
                                                
    
    # 数
    @subm_count_label = Label.new("0件")
    @subm_add_button = Button.new("追加")
    @subm_add_button.setOnAction{|ev|
      start_reload( add:true , count:100 )
    }
    @sort_button_area_left.getChildren().addAll(@subm_count_label,
                                                @subm_add_button ,
                                                Label.new(" "),
                                                Separator.new(Orientation::VERTICAL) )

    
    # @sort_button_area.setStyle("-fx-margin: 3px 3px 0px 3px")
    @sort_buttons = []
    @sort_buttons << @sort_hot = ToggleButton.new("注目")
    @sort_buttons << @sort_new = ToggleButton.new("新着")
    @sort_buttons << @sort_contr_day = ToggleButton.new("物議(日)")
    @sort_buttons << @sort_contr_week = ToggleButton.new("物議(週)")
    # 票数,コメント

    @sort_button_group = ToggleGroup.new()
    @sort_buttons.each{|b| b.setToggleGroup( @sort_button_group) }

    App.i.make_pill_buttons( @sort_buttons )

    # old_sort = @sort_hot # todo:prefからやること
    # @sort_button_group.selectToggle( old_sort )
    # @sort_button_group.selectedToggleProperty().addListener{|obj|
    #   new_selected = obj.getValue()
    #   if new_selected
    #     if old_sort != new_selected
    #       old_sort = new_selected
    #       start_reload
    #     end
    #   else
    #     # 必ずどれかが選択された状態に
    #     @sort_button_group.selectToggle( old_sort )
    #   end
    # }
 
    Util.toggle_group_set_listener_force_selected( @sort_button_group ,
                                                   @sort_hot){|btn| start_reload }
    
    @sort_button_area_left.getChildren().add( Label.new("ソート:"))
    @sort_button_area_left.getChildren().addAll( @sort_buttons )
    @sort_button_area_left.getChildren().add( Label.new(" "))
    @sort_button_area.setLeft( @sort_button_area_left )
    
    # @load_status = Text.new()
    @load_status = Label.new()
    BorderPane.setAlignment( @load_status , Pos::CENTER_LEFT )
    @sort_button_area.setCenter( @load_status )

    getChildren.add( @sort_button_area )

    #### 第三列
    # filterバー
    @filter_area = HBox.new()
    @filter_area.setAlignment( Pos::CENTER_LEFT )
    @filter_text = TextField.new()
    @filter_text.setPromptText("単語でフィルタ")
    @filter_text.setPrefWidth( 160 )
    @filter_text.textProperty().addListener{
      display_subms
    }
    @filter_clear = Button.new("クリア")
    @filter_clear.setOnAction{
      @filter_text.setText("")
    }
    # todo : 一度見たもの db作成後
    @filter_upvoted = ToggleButton.new("UPVOTED")
    @filter_upvoted.setOnAction{
      display_subms
    }
    @filter_read = ToggleButton.new("新着")
    @filter_read.setOnAction{
      display_subms
    }

    @filter_area.getChildren().addAll( Label.new("フィルタ:"), 
                                       @filter_text , @filter_clear , 
                                       Label.new(" "),
                                       @filter_upvoted, @filter_read)
    getChildren.add( @filter_area )
    
    #### table

    @table = TableView.new
    
    rank_column = TableColumn.new
    rank_column.setText("ﾗﾝｸ")
    rank_column.setMaxWidth(60)
    rank_column.setMinWidth(60)
    rank_column.setResizable(false)
    rank_column.setSortable(false)
    #rank_column.set_cell_value_factory{|cdf|
      #rank = @table.getItems().indexOf( cdf.getValue()) + 1
      # SimpleIntegerProperty.new( rank )
    #}
    rank_column.set_cell_value_factory( MapValueFactory.new( :reddo_rownum ))
    rank_column.set_cell_factory{|col| NumberCell.new }

    vote_column = TableColumn.new
    vote_column.set_cell_value_factory{|cdf|
      # p cdf.getValue() # Redd::Objects::Submission
      # SimpleObjectProperty.new( cdf.getValue() ) # 全データを渡す これでいいか
      SimpleObjectProperty.new( [ cdf.getValue() , @account_name ] )

    }
    vote_column.set_cell_factory{|col| VoteCell.new() }
    vote_column.setMinWidth( 0 )
    vote_column.setPrefWidth( 40 )
    vote_column.setResizable( false)
    vote_column.setSortable(false)

    score_column = TableColumn.new
    score_column.setText("ｽｺｱ")
    score_column.setMinWidth( 60 )
    score_column.setMaxWidth( 60 )
    score_column.setPrefWidth( 60 )
    #score_column.set_cell_value_factory( MapValueFactory.new( :reddo_score ))
    #score_column.set_cell_factory{|col| NumberCell.new }
    score_column.set_cell_value_factory{ |cdf| SimpleObjectProperty.new( cdf.getValue()) }
    score_column.set_cell_factory{|col| ScoreNumberCell.new }

    thumb_column = TableColumn.new
    thumb_column.setText("画像")
    thumb_column.setMinWidth(80)
    thumb_column.setMaxWidth(80)
    thumb_column.set_cell_value_factory( MapValueFactory.new(:reddo_thumbnail_decoded))
    #thumb_column.set_cell_value_factory{ |cdf| SimpleObjectProperty.new( cdf.getValue()) }
    thumb_column.set_cell_factory{|col| ThumbCell.new }
    thumb_column.setResizable(false)
    thumb_column.setSortable(false)

    comm_column = TableColumn.new
    comm_column.setText("ｺﾒﾝﾄ数")
    comm_column.setMinWidth( 60 )
    comm_column.setMaxWidth( 60 )
    comm_column.setPrefWidth( 60 )
    comm_column.set_cell_value_factory( MapValueFactory.new( :num_comments ))
    comm_column.setSortable(false)
    comm_column.set_cell_factory{|col| NumberCell.new }

    comm_new_column = TableColumn.new
    comm_new_column.setText("新着")
    comm_new_column.setMinWidth( 60 )
    comm_new_column.setMaxWidth( 60 )
    comm_new_column.setPrefWidth( 60 )
    comm_new_column.set_cell_value_factory( MapValueFactory.new( :reddo_num_comments_new ))
    comm_new_column.setSortable(false)
    comm_new_column.set_cell_factory{|col| NumberCell.new }

    title_column = TableColumn.new
    title_column.setText("タイトル")
    title_column.set_cell_value_factory{ |cdf| SimpleObjectProperty.new( cdf.getValue()) }
    title_column.set_cell_factory{|col| 
      multi = @url_handler.path_is_multireddit( @page_info[:name])
      TitleCell.new(col, show_subreddit:multi) 
    }
    title_column.prefWidthProperty().bind( @table.widthProperty.subtract(rank_column.widthProperty).subtract( vote_column.widthProperty).subtract( score_column.widthProperty ).subtract(thumb_column.widthProperty).subtract( comm_column.widthProperty ).subtract( comm_new_column.widthProperty ).subtract(20))

    title_column.setSortable(false)

    # @table.setColumnResizePolicy(TableView::CONSTRAINED_RESIZE_POLICY)
    @table.setPrefHeight( 10000 )
    @table.getColumns.setAll( rank_column , vote_column , score_column , thumb_column , comm_column , comm_new_column , title_column)

    @subs_observable = FXCollections.synchronizedObservableList(FXCollections.observableArrayList)
    @table.setItems( @subs_observable )

    @table.setContextMenu( create_context_menu )
    # @table.setFixedCellSize(javafx.scene.layout.Region::USE_COMPUTED_SIZE)
    # @table.setFixedCellSize( 100 )

    @old_selected_item = nil
    # これだとカラムとかでも反応してしまう
    #old_row_f = @table.getRowFactory() # デフォルトはnilだから
    @table.setRowFactory{|tv|
      r = javafx.scene.control.TableRow.new
      r.setOnMouseClicked{|ev|
      # if ev.getTarget().getParent().kind_of?(javafx.scene.control.TableRow)
        if not r.isEmpty()
          case ev.getButton()
          when MouseButton::PRIMARY
            item =  @table.getSelectionModel().getSelectedItem()
            if @old_selected_item == item
              open_selected_submission()
            else
              @old_selected_item = item
            end
          end
        end
      }
      r
    }
    
    @table.setOnKeyReleased{|ev|
      case ev.getCode()
      when KeyCode::SPACE
        open_selected_submission()
      end
    }
    
    getChildren().add( @table )

    # 本体
    self.class.setMargin( @button_area , Insets.new(3.0 , 3.0 , 0 , 3.0) ) # trbl
    self.class.setMargin( @sort_button_area , Insets.new(3.0 , 3.0 , 0 , 3.0) ) # trbl
    self.class.setMargin( @filter_area , Insets.new(3.0 , 3.0 , 0 , 3.0) ) # trbl
    self.class.setMargin( @table , Insets.new(3.0, 3.0 , 0 , 3.0) )
    
    # tab
    prepare_tab( subpath_to_name(@page_info[:name]) , "/res/list.png")

    @tab.setOnClosed{
      finish()
    }

    # subのデータ取得
    if @is_multireddit
      @active_label.setText("[multi]")
    else
      start_load_sub_info
    end

    start_reload
  end # initialize
  
  def start_load_sub_info
    @load_sub_info_thread = Thread.new{
      loop do

        begin
          @sub_info = App.i.client(@account_name).subreddit_from_name( @page_info[:name] )
          if @sub_info
            title = @sub_info[:title] || subpath_to_name(@page_info[:name])
            Platform.runLater{
              @title_label.setText( Html_entity.decode(title) )
              set_tab_text( @sub_info[:display_name] )
              @active_label.setText("ユーザー数: #{@sub_info[:accounts_active]}/#{@sub_info[:subscribers]}")
            }
          end
        rescue
          $stderr.puts "sub情報取得失敗"
        end
      
        sleep( 300 + rand( 10 ) )
      end # loop
    }
  end

  def finish
    if @load_sub_info_thread
      if @load_sub_info_thread.alive?
        @load_sub_info_thread.kill
      end
      @load_sub_info_thread = nil
    end
  end
  
  def subname_to_pathname(name)
    @url_handler.subname_to_url(name).path
  end

  def subpath_to_name(path)
    if path == "../"
      "Front"
    else
      File.basename(path)
    end
  end

  def start_reload(add:false , count:100)
    loading( Proc.new{ reload(add:add , count:count) } , 
             Proc.new{ 
               set_load_button_enable( true ) 
               if not add
                 Platform.runLater{ @table.scrollTo(0) }
               end
             } , 
             Proc.new{ |e| 
               set_status("#{App.i.now} エラー #{e}" , true) 
               
             }
             )
  end

  def set_status(str , error = false)
    Platform.runLater{
      @load_status.setText( str ) 
      if error
        @load_status.setStyle("-fx-text-fill:red;")
      else
        @load_status.setStyle("")
      end
    }
  end

  def reload( add:false , count:100)
    $stderr.puts "reload"
    set_load_button_enable( false )
    Platform.runLater{ 
      requestFocus() 
    }
    cl = App.i.client(@account_name)
    $stderr.puts cl.access.to_json ########

    after = if add and @subms.to_a.length > 0
              @subms.last[:name]
            else
              @subms = []
              nil
            end
    
    begin
      subms = case @sort_button_group.getSelectedToggle()
               when @sort_hot
                 cl.get_hot( @page_info[:name] , limit:count , after:after)
               when @sort_new
                 cl.get_new( @page_info[:name] , limit:count , after:after)
               when @sort_contr_day
                 cl.get_controversial( @page_info[:name] , 
                                       {:limit => count , :t => :day , after:after})
               when @sort_contr_week
                 cl.get_controversial( @page_info[:name] , 
                                       {:limit => count , :t => :week ,after:after})
               end
      
      # todo:存在しないsubの対応
      # todo:randomの対応
      if subms
        subms.each_with_index{|obj,i|
          obj[:reddo_rownum] = i + 1 + @subms.length
          # score hack
          obj[:reddo_orig_vote_score] = if obj[:likes] == true
                                          1
                                        elsif obj[:likes] == false
                                          -1
                                        else
                                          0
                                        end
          obj[:reddo_vote_score] = obj[:reddo_orig_vote_score]
          obj[:reddo_score] = obj[:score]
          obj[:title_decoded] = Html_entity.decode( obj[:title] )
          
          obj[:reddo_thumbnail_decoded] = if obj[:thumbnail] =~ /^http/o
                                            Html_entity.decode( obj[:thumbnail] )
                                          else
                                            url , w , h = Util.find_submission_preview(obj)
                                            if url
                                              Html_entity.decode( url )
                                            else
                                              nil
                                            end
                                          end
          
          set_num_comments_new( obj )
          
        }

        @subms += subms

        set_status( App.i.now + " 更新")
        if add
          display_subms(addition:subms)
        else
          display_subms
        end
      else
        # 存在しないsubか
        set_status( App.i.now + " サブレディットが見つかりません" , true)
      end
    rescue Redd::Error::PermissionDenied
      set_status( App.i.now + " アクセスできません" , true)
    end

  end # subs

  def set_num_comments_new( obj )
    fetched = ReadCommentDB.instance.get_count( obj[:id] )
    if fetched
      obj[:reddo_num_comments_new] = [obj[:num_comments] - fetched , 0].max
    end
  end

  def get_sub_url
    if @sub_info
      # 相対パスである
      @url_handler.linkpath_to_url(@sub_info[:url])
    else
      @url_handler.subname_to_url( @page_info[:name] )
    end
  end

  def display_subms(addition:nil)
    old_top = get_scroll_top
    if addition
      @subs_observable.addAll( filter(addition) )
    else
      @subs_observable.setAll( filter(@subms) ) # eventを発行しない
    end
    set_scroll_amount
    Platform.runLater{
      @subm_count_label.setText("#{@subms.length}件")
      @table.scrollTo(old_top)
    }
  end

  def get_scroll_top
    if ch = @table.getChildren() and ch.size() > 1 and vf = ch.get(1)
      cell = vf.getFirstVisibleCellWithinViewPort() || vf.getFirstVisibleCell()
      if cell
        cell.getIndex()
      else
        0
      end
    else
      0
    end
  end

  def set_scroll_amount
    # if sc = @table.lookup(".scroll-bar")
    if ch = @table.getChildren() and ch.size() > 1 and vf = ch.get(1)
      # $stderr.puts "スクロール対象捕捉"
      # p sc.getStyleClass() # 何もない
      # p vf.getClass() # ch.get(1) -> virtual flow
      vf.setOnScroll{|ev|
        # $stderr.puts "スクロール捕捉 #{Time.now}"
        # ev.deltaY =  ev.getDeltaY() * 2.0
        
        first_cell = vf.getFirstVisibleCellWithinViewPort() || vf.getFirstVisibleCell()
        last_cell  = vf.getLastVisibleCellWithinViewPort() || vf.getLastVisibleCell()

        if first_cell and last_cell

          first = first_cell.getIndex()
          last  = last_cell.getIndex()
          amount = (last - first) / 2
          amount = 1 if amount < 1
        
          # p ev.getDeltaY()
          amount = if ev.getDeltaY() < 0
                     amount
                   else
                     amount * -1
                   end

          target = first + amount
          # $stderr.puts( "first = #{first} last = #{last} }amount = #{amount} target = #{target}")
          @table.scrollTo( target )
        end

        # scroll reload
        # filterとの兼ね合いがめんどい
        # last = vf.getLastVisibleCell()
        # $stderr.puts last.getIndex()
        # if last.getIndex() == (ch.size() - 1) and ch.size() < 1000
        #  start_reload( add:true , count:25 )
        # end

      }
    end
  end

  def set_scroll_amount2
    if ch = @table.getChildren() and ch.size() > 1 and vf = ch.get(1)
      vf.setOnScroll{|ev|
        if sc = @table.lookup( '.scroll-bar:vertical')
          amount = if ev.getDeltaY() < 0
                      sc.getBlockIncrement() / 2
                   else
                      sc.getBlockIncrement() / -2
                   end
          p sc.getValue()
          p amount
          sc.setValue( sc.getValue() + amount )
        end
      }
    end
  end

  def filter(subms_in)
    word = @filter_text.getText().downcase
    filter_upvoted = @filter_upvoted.isSelected()

    subms = subms_in
    if( word.length > 0 )
      subms = subms.find_all{|subm|
        subm[:title_decoded].to_s.downcase.index( word ) or
        subm[:author].to_s.downcase.index( word ) or
        subm[:link_flair_text].to_s.downcase.index(word)
      }
    end

    if filter_upvoted
      subms = subms.find_all{|subm| subm[:reddo_vote_score] == 1 }
    end
    if @filter_read.isSelected()
      subms = subms.find_all{|subm| subm[:reddo_num_comments_new].to_i > 0 }
    end

    subms
  end

  def set_load_button_enable( enable )
    if enable
      @reload_button.setDisable( false )
      @account_selector.setDisable(false)
      @sort_buttons.each{|b| b.setDisable( false ) }
      @subm_add_button.setDisable(false)

      @load_stop_button.setDisable( true )
    else
      @reload_button.setDisable( true )
      @account_selector.setDisable(true)
      @sort_buttons.each{|b| b.setDisable( true ) }
      @subm_add_button.setDisable(true)
      
      @load_stop_button.setDisable( false )
    end
  end

  def open_selected_submission
    # url = item_to_comment_link( @table.getSelectionModel().getSelectedItem() )
    item =  @table.getSelectionModel().getSelectedItem()
    subm_id = item[:id]
    title   = item[:title_decoded]
    # App.i.open_comment( link_id:subm_id , title:title , account_name:@account_name )

    App.i.open_by_page_info( { :site  => @page_info[:site] ,
                               :type  => 'comment',
                               :name  => subm_id , 
                               :title => title , # 暫定表示用
                               :suggested_sort => item[:suggested_sort],
                               :account_name => @account_name })
    
  end

  class VoteCell < Java::JavafxSceneControl::TableCell
    include JRubyFX::DSLControl

    def initialize()
      super()
      @upvote_button = ToggleButton.new("▲")
      @downvote_button = ToggleButton.new("▼")

      App.i.make_pill_buttons( [ @upvote_button , @downvote_button ] , true )

      tg = ToggleGroup.new()
      @upvote_button.setToggleGroup(tg)
      @downvote_button.setToggleGroup(tg)

      tg.selectedToggleProperty().addListener{|ov , old_tb , new_tb|
        # $stderr.puts "セレクション変更"
        vote_score = 0
        if @upvote_button.isSelected
          vote_score = 1
          @upvote_button.setStyle("-fx-text-fill:orange")
        else
          @upvote_button.setStyle("")
        end
        if @downvote_button.isSelected
          vote_score = -1
          @downvote_button.setStyle("-fx-text-fill:blue")
        else
          @downvote_button.setStyle("")
        end
        
        it = getTableRow().getItem
        if it and it[:reddo_vote_score] != vote_score
          getTableView().getItems().subList( index , index + 1).replaceAll{|item| 
            item[:reddo_score] = item[:score] - item[:reddo_orig_vote_score] + vote_score
            item[:reddo_vote_score] = vote_score

            # p item.client.

            Thread.new{
              $stderr.puts "vote thread start"
              begin
                c = App.i.client( @account_name ) # token更新のため
                # $stderr.puts "リフレッシュ"
                case vote_score
                when 1
                  item.upvote
                when -1
                  item.downvote
                when 0
                  item.clear_vote
                end
                App.i.mes("投票しました #{item[:name]}")
              rescue Redd::Error => e
                $stderr.puts $!
                $stderr.puts $@
                App.i.mes("投票エラー #{e.inspect}")
              rescue
                $stderr.puts $!
                $stderr.puts $@
                App.i.mes("投票エラー")
              end
            }
            item
          }
        end
      }

      box = VBox.new()
      box.getChildren().add( @upvote_button )
      box.getChildren().add( @downvote_button )

      box.setAlignment( Pos::CENTER_LEFT )

      setGraphic( box )

    end
    
    def updateItem( data_ac , is_empty_col )
      data , @account_name = data_ac
      if is_empty_col
        @upvote_button.setVisible( false )
        @downvote_button.setVisible( false )

      else
        @upvote_button.setVisible( true )
        @downvote_button.setVisible( true )

        if @account_name
          @upvote_button.setDisable( false )
          @downvote_button.setDisable( false )
        else
          @upvote_button.setDisable( true )
          @downvote_button.setDisable( true)
        end

        if data[:reddo_vote_score] == 1
          @upvote_button.setSelected( true )
          @downvote_button.setSelected( false )
        elsif data[:reddo_vote_score] == -1
          @upvote_button.setSelected( false )
          @downvote_button.setSelected( true )
        else
          @upvote_button.setSelected( false )
          @downvote_button.setSelected( false )
        end

      end

    end # updateItem
  end

  # score cell

  class ThumbCell < Java::JavafxSceneControl::TableCell
    include JRubyFX::DSLControl
    IMAGE_SIZE = 70
    # IMAGE_SIZE = 50
    def initialize
      super()
      @image_view = ImageView.new
      @image_view.setSmooth(true)
      # @image_view.setCache(true)
      # @image_view.setFitWidth( IMAGE_SIZE )
      # @image_view.setFitHeight( IMAGE_SIZE )
      setAlignment( Pos::CENTER )
      setMinHeight(IMAGE_SIZE + 10)
      setGraphic( @image_view)
    end

    @@cache = {}

    def updateItem( data , is_empty_col )

      if data and not is_empty_col
        url = data
        # p url
        i = @@cache[ url ] || Image.new( url, IMAGE_SIZE, IMAGE_SIZE, true,true,true) # ratio,smooth,background
        @@cache[ url ] = i
        @image_view.setImage( i )
      else
        @image_view.setImage(nil)
      end
      
    end
  end

  class NumberCell < Java::JavafxSceneControl::TableCell
    include JRubyFX::DSLControl

    def initialize
      super()
      @number = Label.new
      @number.setStyle( "-fx-font-size:20px")
      setAlignment( Pos::CENTER_RIGHT )
      setGraphic(@number)
    end

    def updateItem( data , is_empty_col )
      if data and not is_empty_col
        @number.setText(data.to_s)
      else
        @number.setText("")
      end
    end
  end

  class ScoreNumberCell < Java::JavafxSceneControl::TableCell
    include JRubyFX::DSLControl

    def initialize
      super()
      @number = Label.new
      @number.setStyle( "-fx-font-size:20px")
      setAlignment( Pos::CENTER_RIGHT )
      setGraphic(@number)
    end

    def updateItem( data , is_empty_col )
      if data and not is_empty_col
        case data[:reddo_vote_score]
        when 1
          @number.setStyle( "-fx-font-size:20px;-fx-text-fill:orange")
        when -1
          @number.setStyle( "-fx-font-size:20px;-fx-text-fill:blue")
        else
          @number.setStyle( "-fx-font-size:20px;")
        end
        
        @number.setText(data[:reddo_score].to_s )
      else
        @number.setText("")
      end
    end
  end

  class TitleCell < Java::JavafxSceneControl::TableCell
    include JRubyFX::DSLControl

    # FONT_FAMILY = '-fx-font-family:"Meiryo";' # 暫定
    @@dummy_label = nil
    @@dummy_scene = nil

    def initialize(col = nil , artificial_bold:false, show_subreddit:false)
      super()
      @show_subreddit = show_subreddit

      # @subm_title = Label.new
      @subm_title = Text.new
      # @subm_title.setWrapText(true)
      if artificial_bold
        # drowshadow ( blur-type , color , radius , spread, offset_x , offset_y )
        @subm_title.setStyle( "-fx-font-size:16px; -fx-word-wrap:break-word; -fx-effect: dropshadow( one-pass-box , black , 0,0,1,0 );")
      else
        @subm_title.setStyle( "-fx-font-size:16px; -fx-font-weight: bold; -fx-word-wrap:break-word")
      end

      if @show_subreddit
        @subreddit = Label.new
        @subreddit.setStyle( "-fx-text-fill:green;-fx-padding:0 6px 0 0;")
        @subreddit.setWrapText(false)
      end

      @nsfw = Label.new("NSFW")
      @nsfw.setStyle("-fx-text-fill:white; -fx-background-color:#{AppColor::STRONG_RED}")
      @nsfw.setWrapText(false)

      @link_flair = Label.new
      @link_flair.setStyle( "-fx-text-fill:#dddddd; -fx-background-color:#222222;")
      @link_flair.setWrapText(false)

      @datetime = Label.new
      @datetime.setStyle( "-fx-padding:0 6px 0 0;")
      @datetime.setWrapText(false)

      @sticky = Label.new("Sticky")
      @sticky.setStyle("-fx-text-fill:white; -fx-background-color:#{AppColor::STRONG_GREEN}")
      @sticky.setWrapText(false)

      @author = Label.new
      @author.setStyle("-fx-text-fill:#{AppColor::STRONG_BLUE};")
      @author.setWrapText(false)
      
      @user_flair = Label.new
      @user_flair.setStyle( "-fx-border-color:black; -fx-border-width: 1 1 1 1" )
      @user_flair.setWrapText(false)

      @domain = Label.new
      @domain.setWrapText(false)
      @domain.setStyle("-fx-padding:0 6px 0 6px;")
      #####

      # setPrefHeight( 1 ) # これをやるとwrapできなくなる

      # @hbox = HBox.new()
      @hbox = FlowPane.new(Orientation::HORIZONTAL)
      @hbox.setAlignment( Pos::CENTER_LEFT )
      
      @hbox.getChildren().add( @subreddit ) if @show_subreddit
      @hbox.getChildren().add( @nsfw )
      @hbox.getChildren().add( @sticky )
      @hbox.getChildren().add( @link_flair )
      @hbox.getChildren().add( @domain )

      

      # @hbox = TextFlow.new()
      @hbox.getChildren().add( @datetime )
      @hbox.getChildren().add( @author )
      @hbox.getChildren().add( @user_flair )

      # @hbox2 = HBox.new()
      # @hbox2.setAlignment( Pos::CENTER_LEFT )
      # @hbox2.getChildren().add( @subreddit ) if @show_subreddit
      # @hbox2.getChildren().add( @nsfw )
      # @hbox2.getChildren().add( @sticky )
      # @hbox2.getChildren().add( @link_flair )
      # @hbox2.getChildren().add( @domain )

      @box = VBox.new
      @box.setAlignment( Pos::TOP_LEFT )
      @box.getChildren().add( @hbox )
      # @box.getChildren().add( @hbox2 )
      @box.getChildren().add( @subm_title )

      # box.prefHeightProperty().bind( self.heightProperty()) # wrapしなくなる
      # self.heightProperty().bind( box.heightProperty())
      # self.heightProperty().bind( box.heightProperty())
      # @box.setPrefHeight(70) # 固定されてしまう -> あとでまた変える
      # @subm_title.heightProperty().addListener{

      widthProperty().addListener{
        @subm_title.setWrappingWidth( getWidth() - 4)

      }

      setGraphic( @box )
    end

    def updateItem( data , is_empty_col )

      if( data and not is_empty_col )


        time = Time.at( data[:created_utc] )
        @datetime.setText( time.strftime("%Y-%m-%d %H:%M:%S") )

        if @show_subreddit
          @subreddit.setText( data[:subreddit] )
        end

        fl = data[:link_flair_text].to_s.strip
        if fl.length > 0
          @link_flair.setVisible(true)
          @link_flair.setText( fl )
        else
          @link_flair.setVisible(false)
          @link_flair.setText("")
        end

        if data[:over_18]
          @nsfw.setText("NSFW")
          @nsfw.setVisible(true)
        else
          @nsfw.setText("")
          @nsfw.setVisible(false)
        end

        if data[:stickied]
          @sticky.setText(" Sticky ")
          @sticky.setVisible(true)
        else
          @sticky.setText("")
          @sticky.setVisible(false)
        end

        author = data[:author].to_s
        if d = data[:distinguished]
          author += "[" + d[0].to_s + "]"
          if d == 'moderator'
            @author.setStyle("-fx-text-fill:#{AppColor::STRONG_GREEN};")
          elsif d == 'admin'
            @author.setStyle("-fx-text-fill:#{AppColor::STRONG_RED};")
          else
            @author.setStyle("-fx-text-fill:#{AppColor::STRONG_BLUE};")
          end
        else
          @author.setStyle("-fx-text-fill:#{AppColor::STRONG_BLUE};")
        end
        @author.setText( author )

        if afl = data[:author_flair_text] and afl.to_s.length > 0
          @user_flair.setText( afl )
          @user_flair.setVisible(true)
        else
          @user_flair.setText( "" )
          @user_flair.setVisible(false)
        end
        
        @domain.setText( "(" + data[:domain].to_s + ")" )

        @subm_title.setText( data[:title_decoded].to_s.strip  )
        # height = calc_title_height( @subm_title.getWidth(),
        #                             data[:title_decoded].to_s.strip,
        #                             @subm_title.getStyle() )
        # p height

        @box.setVisible(true)
      else
        @box.setVisible(false)
      end
    end

  end
  
  class TitleCellSimple < Java::JavafxSceneControl::TableCell
    include JRubyFX::DSLControl

    def initialize(col = nil)
      super()
      
      @subm_title = Label.new
      @subm_title.setStyle( '-fx-font-size:14px; -fx-font-weight: bold; -fx-word-wrap:break-word')
      @subm_title.setWrapText(true)

      setGraphic( @subm_title )
    end

    def updateItem( data , is_empty_col )

      if( data and not is_empty_col )
        @subm_title.setText( data[:title_decoded].to_s.strip  )
      else
        @subm_title.setText("")
      end
      
    end
  end

  # commcount
  # new
  
  # TextFlowでTextを流し込めるもよう
  # [タイトル]
  # 時間 投稿者 ソースドメイン

  # hide , browser などのコマンドはコンテクストで

  def create_context_menu
    # cancel_menu = MenuItem.new("キャンセル")
    # cancel_menu.setOnAction{|e|
    #  //
    # }

    open_external = MenuItem.new("リンクを外部ブラウザで開く")
    open_external.setOnAction{|e|
      if item = @table.getSelectionModel().getSelectedItem()
        url = item[:url]
        App.i.open_external_browser(url)
      end
    }
    open_external_r = MenuItem.new("リンクを外部ブラウザで開く(readability)")
    open_external_r.setOnAction{|e|
      if item = @table.getSelectionModel().getSelectedItem()
        url = item[:url]
        url_r = "http://www.readability.com/m?url=" + URI.encode( url )
        # url_r = "http://mobilizer.instapaper.com/m?u=" + URI.encode( url )
        App.i.open_external_browser(url_r)
      end
    }
    open_comment_external = MenuItem.new("コメントを外部ブラウザで開く")
    open_comment_external.setOnAction{|e|
      if item = @table.getSelectionModel().getSelectedItem()
        url = item_to_comment_link( item )
        App.i.open_external_browser( url )
      end
    }

    menu = ContextMenu.new
    menu.getItems().addAll( open_external , open_external_r , open_comment_external )

    if @url_handler.path_is_multireddit( @page_info[:name] )
      
      open_sub = MenuItem.new( "Subredditを開く")
      open_sub.setOnAction{|e|
        if item = @table.getSelectionModel().getSelectedItem()
          subname = item[:subreddit]
          page_info = { 
            type:"sub" , 
            site:@page_info[:site] , 
            name:subname ,
            account_name: @account_name
          }
          App.i.open_by_page_info( page_info )
        end
      }
      
      menu.getItems().add( open_sub )
    end

    # 対象によるメニュー内容の切り変え
    menu.setOnShowing{|e|
      item = @table.getSelectionModel().getSelectedItem()
      url = item[:url]
      comm_url = item_to_comment_link( item )

      if url =~ /^http/ and not url == comm_url
        open_external.setVisible( true )
      else
        open_external.setVisible( false)
      end
    }

    menu
  end

  def item_to_comment_link( item )
    path = item[:permalink] # pass
    @url_handler.linkpath_to_url(path)
  end

  # commentページ上での変更を反映させる
  def submission_voted( subm_id )
    # not implemented
  end

  def submission_comment_fetched( subm_id , count )
    target = nil
    @subms.each{|obj|
      if obj[:id] == subm_id
        obj[:num_comments] = count
        set_num_comments_new( obj )
        target = obj
      end
    }
    if target
      replace_item( target )
    end
  end

  def replace_item( obj )
    index = @table.getItems().find_index{|o| o[:id] == obj[:id] }
    if index
      @table.getItems().subList( index , index + 1 ).replaceAll{|old|
        obj
      }
    end
  end

end
